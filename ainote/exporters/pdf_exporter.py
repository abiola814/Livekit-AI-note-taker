"""PDF exporter."""

from datetime import datetime
from .exporter import BaseExporter


class PDFExporter(BaseExporter):
    """Export meeting notes to PDF format."""

    async def export(self, meeting, output_path: str, options) -> None:
        """Export meeting to PDF file."""
        try:
            from reportlab.lib.pagesizes import letter
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib.units import inch
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
            from reportlab.lib.enums import TA_LEFT, TA_CENTER
        except ImportError:
            raise ImportError(
                "reportlab package required for PDF export. Install with: pip install reportlab"
            )

        # Create PDF document
        doc = SimpleDocTemplate(output_path, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []

        # Custom styles
        title_style = ParagraphStyle(
            "CustomTitle",
            parent=styles["Heading1"],
            fontSize=24,
            textColor="darkblue",
            spaceAfter=30,
            alignment=TA_CENTER,
        )

        heading_style = ParagraphStyle(
            "CustomHeading",
            parent=styles["Heading2"],
            fontSize=16,
            textColor="darkblue",
            spaceAfter=12,
            spaceBefore=12,
        )

        # Title
        title = options.title or meeting.title or f"Meeting Notes - {meeting.room_id}"
        story.append(Paragraph(title, title_style))
        story.append(Spacer(1, 0.2 * inch))

        # Metadata
        if options.include_metadata:
            story.append(Paragraph("Meeting Information", heading_style))
            metadata_text = f"""
            <b>Room ID:</b> {meeting.room_id}<br/>
            <b>Start Time:</b> {meeting.start_time.strftime('%Y-%m-%d %H:%M:%S')}<br/>
            """
            if meeting.end_time:
                metadata_text += f"<b>End Time:</b> {meeting.end_time.strftime('%Y-%m-%d %H:%M:%S')}<br/>"
                metadata_text += f"<b>Duration:</b> {meeting.duration_minutes():.1f} minutes<br/>"
            if meeting.description:
                metadata_text += f"<b>Description:</b> {meeting.description}<br/>"
            metadata_text += f"<b>Language:</b> {meeting.language}<br/>"
            metadata_text += f"<b>Status:</b> {meeting.status.value}<br/>"

            story.append(Paragraph(metadata_text, styles["Normal"]))
            story.append(Spacer(1, 0.3 * inch))

        # Summary
        if options.include_summary and meeting.notes:
            story.append(Paragraph("Summary", heading_style))
            for note in meeting.notes:
                if note.note_type.value == "summary":
                    # Convert markdown-like content to HTML
                    content = note.content.replace("\n", "<br/>")
                    story.append(Paragraph(content, styles["Normal"]))
            story.append(Spacer(1, 0.2 * inch))

        # Action Items
        if options.include_action_items and meeting.action_items:
            story.append(Paragraph("Action Items", heading_style))
            for idx, item in enumerate(meeting.action_items, 1):
                action_text = f"<b>{idx}. {item.title}</b><br/>"
                if item.description:
                    action_text += f"{item.description}<br/>"
                action_text += f"<i>Priority: {item.priority.value}"
                if item.assigned_to:
                    action_text += f" | Assigned to: {item.assigned_to}"
                if item.due_date:
                    action_text += f" | Due: {item.due_date.strftime('%Y-%m-%d')}"
                action_text += f" | Status: {item.status.value}</i><br/>"

                story.append(Paragraph(action_text, styles["Normal"]))
                story.append(Spacer(1, 0.1 * inch))

        # Transcript
        if options.include_transcripts and meeting.transcript and meeting.transcript.segments:
            story.append(PageBreak())
            story.append(Paragraph("Transcript", heading_style))
            for segment in meeting.transcript.segments:
                speaker = segment.speaker or "Unknown"
                timestamp = segment.timestamp.strftime("%H:%M:%S") if segment.timestamp else ""
                transcript_text = f"<b>[{timestamp}] {speaker}:</b> {segment.text}<br/>"
                story.append(Paragraph(transcript_text, styles["Normal"]))
                story.append(Spacer(1, 0.05 * inch))

        # Footer
        footer_text = f"<i>Generated by AI Note on {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC</i>"
        story.append(Spacer(1, 0.3 * inch))
        story.append(Paragraph(footer_text, styles["Normal"]))

        # Build PDF
        doc.build(story)
