"""DOCX (Word) exporter."""

from datetime import datetime
from .exporter import BaseExporter


class DOCXExporter(BaseExporter):
    """Export meeting notes to DOCX (Microsoft Word) format."""

    async def export(self, meeting, output_path: str, options) -> None:
        """Export meeting to DOCX file."""
        try:
            from docx import Document
            from docx.shared import Pt, RGBColor
            from docx.enum.text import WD_ALIGN_PARAGRAPH
        except ImportError:
            raise ImportError(
                "python-docx package required for DOCX export. Install with: pip install python-docx"
            )

        # Create document
        doc = Document()

        # Title
        title = options.title or meeting.title or f"Meeting Notes - {meeting.room_id}"
        title_para = doc.add_heading(title, level=0)
        title_para.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Metadata
        if options.include_metadata:
            doc.add_heading("Meeting Information", level=1)
            doc.add_paragraph(f"Room ID: {meeting.room_id}")
            doc.add_paragraph(f"Start Time: {meeting.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
            if meeting.end_time:
                doc.add_paragraph(f"End Time: {meeting.end_time.strftime('%Y-%m-%d %H:%M:%S')}")
                doc.add_paragraph(f"Duration: {meeting.duration_minutes():.1f} minutes")
            if meeting.description:
                doc.add_paragraph(f"Description: {meeting.description}")
            doc.add_paragraph(f"Language: {meeting.language}")
            doc.add_paragraph(f"Status: {meeting.status.value}")

        # Summary
        if options.include_summary and meeting.notes:
            doc.add_heading("Summary", level=1)
            for note in meeting.notes:
                if note.note_type.value == "summary":
                    doc.add_paragraph(note.content)

        # Action Items
        if options.include_action_items and meeting.action_items:
            doc.add_heading("Action Items", level=1)
            for idx, item in enumerate(meeting.action_items, 1):
                doc.add_heading(f"{idx}. {item.title}", level=2)
                if item.description:
                    doc.add_paragraph(item.description)

                details = f"Priority: {item.priority.value}"
                if item.assigned_to:
                    details += f" | Assigned to: {item.assigned_to}"
                if item.due_date:
                    details += f" | Due: {item.due_date.strftime('%Y-%m-%d')}"
                details += f" | Status: {item.status.value}"

                para = doc.add_paragraph(details)
                para.runs[0].italic = True

        # Transcript
        if options.include_transcripts and meeting.transcript and meeting.transcript.segments:
            doc.add_page_break()
            doc.add_heading("Transcript", level=1)
            for segment in meeting.transcript.segments:
                speaker = segment.speaker or "Unknown"
                timestamp = segment.timestamp.strftime("%H:%M:%S") if segment.timestamp else ""
                para = doc.add_paragraph()
                para.add_run(f"[{timestamp}] {speaker}: ").bold = True
                para.add_run(segment.text)

        # Footer
        footer_para = doc.add_paragraph()
        footer_run = footer_para.add_run(
            f"\nGenerated by AI Note on {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
        )
        footer_run.italic = True

        # Save document
        doc.save(output_path)
