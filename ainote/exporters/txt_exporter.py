"""Plain text exporter."""

from datetime import datetime
from .exporter import BaseExporter


class TXTExporter(BaseExporter):
    """Export meeting notes to plain text format."""

    async def export(self, meeting, output_path: str, options) -> None:
        """Export meeting to TXT file."""
        content = self._generate_text(meeting, options)

        with open(output_path, "w", encoding="utf-8") as f:
            f.write(content)

    def _generate_text(self, meeting, options) -> str:
        """Generate plain text content."""
        lines = []

        # Title
        title = options.title or meeting.title or f"Meeting Notes - {meeting.room_id}"
        lines.append("=" * len(title))
        lines.append(title)
        lines.append("=" * len(title))
        lines.append("")

        # Metadata
        if options.include_metadata:
            lines.append("MEETING INFORMATION")
            lines.append("-" * 50)
            lines.append(f"Room ID: {meeting.room_id}")
            lines.append(f"Start Time: {meeting.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
            if meeting.end_time:
                lines.append(f"End Time: {meeting.end_time.strftime('%Y-%m-%d %H:%M:%S')}")
                lines.append(f"Duration: {meeting.duration_minutes():.1f} minutes")
            if meeting.description:
                lines.append(f"Description: {meeting.description}")
            lines.append(f"Language: {meeting.language}")
            lines.append(f"Status: {meeting.status.value}")
            lines.append("")

        # Summary
        if options.include_summary and meeting.notes:
            lines.append("SUMMARY")
            lines.append("-" * 50)
            for note in meeting.notes:
                if note.note_type.value == "summary":
                    lines.append(note.content)
                    lines.append("")

        # Action Items
        if options.include_action_items and meeting.action_items:
            lines.append("ACTION ITEMS")
            lines.append("-" * 50)
            for idx, item in enumerate(meeting.action_items, 1):
                lines.append(f"{idx}. {item.title}")
                if item.description:
                    lines.append(f"   {item.description}")
                details = f"   Priority: {item.priority.value}"
                if item.assigned_to:
                    details += f" | Assigned to: {item.assigned_to}"
                if item.due_date:
                    details += f" | Due: {item.due_date.strftime('%Y-%m-%d')}"
                details += f" | Status: {item.status.value}"
                lines.append(details)
                lines.append("")

        # Transcript
        if options.include_transcripts and meeting.transcript and meeting.transcript.segments:
            lines.append("TRANSCRIPT")
            lines.append("-" * 50)
            for segment in meeting.transcript.segments:
                speaker = segment.speaker or "Unknown"
                timestamp = segment.timestamp.strftime("%H:%M:%S") if segment.timestamp else ""
                lines.append(f"[{timestamp}] {speaker}: {segment.text}")
            lines.append("")

        # Footer
        lines.append("-" * 50)
        lines.append(f"Generated by AI Note on {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC")

        return "\n".join(lines)
