"""Markdown exporter."""

from datetime import datetime
from .exporter import BaseExporter


class MarkdownExporter(BaseExporter):
    """Export meeting notes to Markdown format."""

    async def export(self, meeting, output_path: str, options) -> None:
        """Export meeting to Markdown file."""
        content = self._generate_markdown(meeting, options)

        with open(output_path, "w", encoding="utf-8") as f:
            f.write(content)

    def _generate_markdown(self, meeting, options) -> str:
        """Generate Markdown content."""
        lines = []

        # Title
        title = options.title or meeting.title or f"Meeting Notes - {meeting.room_id}"
        lines.append(f"# {title}\n")

        # Metadata
        if options.include_metadata:
            lines.append("## Meeting Information\n")
            lines.append(f"- **Room ID**: {meeting.room_id}")
            lines.append(f"- **Start Time**: {meeting.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
            if meeting.end_time:
                lines.append(f"- **End Time**: {meeting.end_time.strftime('%Y-%m-%d %H:%M:%S')}")
                lines.append(f"- **Duration**: {meeting.duration_minutes():.1f} minutes")
            if meeting.description:
                lines.append(f"- **Description**: {meeting.description}")
            lines.append(f"- **Language**: {meeting.language}")
            lines.append(f"- **Status**: {meeting.status.value}\n")

        # Summary
        if options.include_summary and meeting.notes:
            lines.append("## Summary\n")
            for note in meeting.notes:
                if note.note_type.value == "summary":
                    lines.append(note.content)
                    lines.append("")

        # Action Items
        if options.include_action_items and meeting.action_items:
            lines.append("## Action Items\n")
            for idx, item in enumerate(meeting.action_items, 1):
                lines.append(f"### {idx}. {item.title}\n")
                if item.description:
                    lines.append(f"{item.description}\n")
                lines.append(f"- **Priority**: {item.priority.value}")
                if item.assigned_to:
                    lines.append(f"- **Assigned to**: {item.assigned_to}")
                if item.due_date:
                    lines.append(f"- **Due date**: {item.due_date.strftime('%Y-%m-%d')}")
                lines.append(f"- **Status**: {item.status.value}\n")

        # Transcript
        if options.include_transcripts and meeting.transcript and meeting.transcript.segments:
            lines.append("## Transcript\n")
            for segment in meeting.transcript.segments:
                speaker = segment.speaker or "Unknown"
                timestamp = segment.timestamp.strftime("%H:%M:%S") if segment.timestamp else ""
                lines.append(f"**[{timestamp}] {speaker}**: {segment.text}\n")

        # Footer
        lines.append(f"\n---\n*Generated by AI Note on {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC*")

        return "\n".join(lines)
